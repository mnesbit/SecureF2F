import static org.gradle.api.JavaVersion.VERSION_17

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'idea'
    id 'application'
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'idea'
}

allprojects {
    group 'uk.co.nesbit'
    version akkanet_version

    repositories {
        mavenCentral()
    }

    tasks.withType(JavaCompile) {
        sourceCompatibility = VERSION_17
        targetCompatibility = VERSION_17
        options.encoding = 'UTF-8'
        options.compilerArgs += '-XDenableSunApiLintControl'
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile) {
        kotlinOptions {
            languageVersion = '1.6'
            apiVersion = '1.6'
            jvmTarget = VERSION_17
            javaParameters = true   // Useful for reflection.
            freeCompilerArgs = ['-Xjvm-default=all']
        }
    }

    tasks.withType(Test) {
        useJUnitPlatform()

        // Prevent the project from creating temporary files outside of the build directory.
        systemProperty 'java.io.tmpdir', buildDir.absolutePath
        maxHeapSize = '4096m'
    }


    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
        implementation "org.slf4j:slf4j-api:$slf4j_version"

        // Test utilities
        testImplementation "org.junit.jupiter:junit-jupiter-api:$junit5_version"
        testImplementation "org.junit.jupiter:junit-jupiter-params:$junit5_version"
        testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit5_version"
        testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
        testImplementation "org.jetbrains.kotlin:kotlin-test-junit5:$kotlin_version"
        testRuntimeOnly "org.slf4j:slf4j-simple:$slf4j_version"
        testImplementation "org.junit-pioneer:junit-pioneer:$junit_pioneer_version"
    }
}

wrapper {
    gradleVersion = "7.4"
    distributionType = Wrapper.DistributionType.ALL
}

dependencies {
    // Actor framework
    implementation "com.typesafe.akka:akka-actor_2.13:$akka_version"
    implementation "com.typesafe.akka:akka-stream_2.13:$akka_version"
    testImplementation "com.typesafe.akka:akka-testkit_2.13:$akka_version"
    runtimeOnly "com.typesafe.akka:akka-slf4j_2.13:$akka_version"
    runtimeOnly "org.apache.logging.log4j:log4j-slf4j18-impl:$log4j2_version"
    // for lock-free logging
    runtimeOnly "com.lmax:disruptor:$disruptor_version"
    implementation project(':avro')
    implementation project(':crypto')
    implementation project(':network')
}

mainClassName = "uk.co.nesbit.MainKt"
